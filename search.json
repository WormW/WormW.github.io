[{"title":"GoLang基础","url":"/2022/06/25/GoLang基础/","content":"\n1. rune是别称类型，int32\n2. byte是别称类型，uint8\n2. 切片翻倍扩容\n2. 子切片发生扩容后不再与原数组共享内存\n2. switch不需要break\n6. http库\n   1. body只能读一次\n   2. getBody可以读多次，但是原生的http.Request是nil\n   3. header会自动转换大小写\n   4. form要先parseForm\n7.  var _ Interface = &struct{} （确保结构体实现了接口\n8. interface代表一种约束，可以作为参数传递\n9. struct作为一种实体，比较类似class的感觉，作为真正的方法的调用方，二者通过返回值串联，或者通过7约束\n10. builtin是属于全局内建\n11. error.Is会层层解包最终返回\n12. error.As转换包判断能否相等（会进行类型转换尝试）\n12. defer由下至上执行->类似栈，先进后出\n12. 闭包：函数匿名+定义他的上下文，可以访问定义范围外的变量，闭包延时绑定（最终执行的时候的变量才是延迟执行的）\n12. panic代表无可挽回，可以用recover恢复","tags":["golang","基础"]},{"title":"网络协议复习-HTTP","url":"/2022/06/24/网络协议复习-HTTP/","content":"\n# HTTP\n\n1. 基于TCP\n2. 2.0版本对包头进行压缩\n   1. 1.1多请求串行\n   2. 2.0请求并行\n3. keep-alive 保持连接不会立刻中断tcp连接，请求复用\n\n# HTTPS\n\n1. https的通信流程是为了通过非对称加密来生成对称加密使用的参数\n2. 流程\n   1. 客户端生成随机数\n   2. 服务端返回随机数\n   3. 审核服务端证书\n   4. 审核客户端证书\n   5. 生成pre-master\n   6. 服务端+客户端+pre-master 算出对称密钥\n   7. 测试参数- c->s\n   8. 测试参数- s->c\n   9. 完成\n3. 包内包含时间戳和随机数，确保不会被重放和篡改\n\n\n\n# QUIC\n\n1. HTTP3.0\n2. 基于udp\n3. 自定义连接机制\n4. 自定义重传机制\n5. 无阻塞的多路复用\n6. 自定义流量控制\n","tags":["HTTP","HTTPS","QUIC"]},{"title":"网络协议复习-TCP与UDP","url":"/2022/06/24/网络协议复习-TCP与UDP/","content":"\n1. TCP\n   1. 超时重试\n      1. 根据往返时间RTT计算超时重试时间-自适应重传算法\n      2. 超时一次时间加倍一次\n      3. SACK 选择应答 TCP包头增加SACK ，接收端返回三个重复的ack，发送方立刻重发丢失包\n   2. 流量控制\n      1. 滑动窗口\n         1. 避免包堆积\n         2. 接收方处理不过来时发送方不再发送\n         3. 发送方发送窗口探测数据包 调整窗口大小\n      2. 拥塞控制\n         1. TCP BBR拥塞算法，寻找最大，但不占用缓存的发送速度\n         2. 传统算法在速度达到最大值时会因为中间设备缓存问题导致时延变大\n   3. 特点\n      1. 可靠交付\n      2. 面向字节流\n      3. 拥塞控制\n      4. 有状态服务\n2. UDP\n   1. 结构简单\n   2. 不建立连接\n   3. 不做拥塞控制\n   4. 适合做广播\n   5. 应用\n      - 将能力返还给应用层，应用决定具体实现不拘泥于传统的拥塞控制\n      - DHCP、VXLAN、QUIC\n3. Socket\n   1. tcp理论上限 客户端ip x 客户端端口=2^32*2^16=2^48\n   2. 实际上收到**文件描述符**限制和**内存**限制 达不到上限\n   3. 增加接受能力方式\n      1. 多进程- fork进程\n      2. 多线程- pthread_create\n      3. IO多路复用，一个线程维护多个Socket\n         1. fd_set\n         2. select函数，轮训\n      4. IO多路复用\n         1. epoll callback通知（解决c10k）\n\n","tags":["面试","复习","网络协议"]},{"title":"面试PHP-Day1","url":"/2022/06/24/面试PHP-Day1/","content":"\n太久没面试了，记录一下找感觉的过程，和面试过程中遇到的问题\n\n## 问题\n\n1. 网络分层\n   1. OSI七层模型（由上至下 外到底）\n      1. 应用层\n      2. 表示层\n      3. 会话层\n      4. 传输层\n      5. 网络层\n      6. 数据链路层\n      7. 物理层\n   2. TCP/IP四层模型\n      1. 应用层(1.1 1.2 1.3)\n      2. 传输层 \n      3. 网络层 1.5\n      4. 网络接口层（1.6 1.7）\n2. TCP三次握手四次挥手\n   1. 三次握手（证明有来有回，连通性）\n      1. 请求（syn,自身变为syn_sent）\n      2. 应答（syn,自身从listen 变为 syn_rcvd）\n      3. 应答的应答（ack,自身变为established，对方收到后一样）\n   2. 四次挥手\n      1. a：fin(要断开) （变为FIN_WAIT_1）\n      2. b：返回ack（变为CLOSED_WAIT）\n      3. b：返回fin,ack(准备完成)，变为LAST_ACK\n      4. a：返回ack 变为 TIME_WAIT，等待2MSL（为了保证b能收到最后的ack）\n      5. TIME_WAIT这个问的我直接失忆了...太久没看这些了\n3. php-fpm 运行模式\n   1. Static 直接fork max_children\n   2. dynamic 动态fork worker（保证最小）\n   3. ondemand（初始不分配worker，最大max_children 空闲process_idle_timeout后推出）\n\n### tips\n\n答得还可以的问题或者我觉得有思路的问题就不写了\n","tags":["面试","PHP"]},{"title":"裁经Day1","url":"/2022/06/24/裁经Day1/","content":"\n## 介绍\n\n1. 仲裁院只负责经济纠纷，不负责离职证明\n2. 仲裁需要去注册地的仲裁院\n3. 离职证明需要去工作地的劳动监察大队（可以扫码直接网上申请）\n4. 海淀区有两个仲裁院（海淀仲裁院和中关村分院）\n   1. 2022.06这个时间节点，中关村分院也可以受理海淀非中关村区域的仲裁申请\n   2. 中关村分院不需要排队\n   3. 海淀分院八点之前就已经差不多排满上午的号了\n\n## 经历\n\n1. 我是去的海淀仲裁院，所以以下内容只针对海淀分院\n   1. 只需要知道公司的地址公司的名称即可\n   2. 需要带劳动合同和身份证\n   3. 第一次去只是提交申请，不需要提交证据\n   4. 身份证复印件窗口可以免费复印，但是会问你带没带，我没带小姐姐直接免费给我印了。\n   5. 填写完会给告知书，虽然上面写着5天内，但是小姐姐说是1-2周内练习\n   6. 排在我后面的大叔说去年他来的时候不需要排队直接取号就办理\n      1. 去年他总共耗时2个月左右但是因为强制执行的问题总共耗时8-9个月\n2. 早上赶了首班车地铁，浑浑噩噩一整天，六点多就到了仲裁院门口，八点半左右开始叫号，不到9点，办完了就出来了。\n","tags":["仲裁"]},{"title":"Hello World","url":"/2022/06/23/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]